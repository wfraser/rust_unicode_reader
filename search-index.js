var N=null,E="",T="t",U="u",searchIndex={};
var R=["unicode_segmentation","An iterator over the substrings of a string which, after…","as_str","View the underlying data (the part yet to be iterated) as…","usize","graphemeincomplete","result","option","graphemes","Returns an iterator over substrings of `self` separated on…","Returns an iterator over substrings of `self`, split on…","into_iter","try_from","try_into","borrow_mut","type_id","borrow","typeid","size_hint","next_back","graphemeindices","graphemecursor","uwordbounds","uwordboundindices","unicodesentences","usentencebounds","usentenceboundindices","GraphemeIncomplete","GraphemeIndices","Graphemes","GraphemeCursor","UWordBoundIndices","UWordBounds","UnicodeSegmentation","UnicodeWords","USentenceBounds","USentenceBoundIndices","UnicodeSentences","unicode_reader","codepoints","formatter","BadUtf8Error","CodePoints"];
searchIndex[R[38]]={"doc":"This crate provides adaptors which wrap byte-oriented…","i":[[3,R[42],R[38],"Wraps a byte-oriented reader and yields the UTF-8 data one…",N,N],[3,R[41],E,"An error raised when parsing a UTF-8 byte stream fails.",N,N],[12,"bytes",E,"The bytes that could not be parsed as a code point.",0,N],[3,R[29],E,"Wraps a `char`-oriented reader and yields the data one…",N,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[11],E,E,1,[[],["i"]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[6]]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[R[17]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[],[R[6]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"to_string",E,E,0,[[["self"]],["string"]]],[11,R[12],E,E,0,[[[U]],[R[6]]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[R[17]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[],[R[6]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[11],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[6]]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[R[17]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[],[R[6]]]],[11,"from",E,E,1,[[["r"]],[R[39]]]],[11,"from",E,E,2,[[["r"]],[R[8]]]],[11,"from",E,E,1,[[["r"]],[["bytes"],[R[39],["bytes"]]]]],[11,"from",E,E,2,[[["r"]],[[R[8],[R[39]]],[R[39],["bytes"]]]]],[11,"next",E,"Get the next Unicode code point from the stream. Any…",1,[[["self"]],[R[7]]]],[11,"next",E,"Get the next grapheme cluster from the stream. Note that…",2,[[["self"]],[R[7]]]],[11,"fmt",E,E,0,[[[R[40]],["self"]],[R[6]]]],[11,"fmt",E,E,0,[[[R[40]],["self"]],[R[6]]]],[11,"description",E,E,0,[[["self"]],["str"]]]],"p":[[3,R[41]],[3,R[42]],[3,R[29]]]};
searchIndex[R[0]]={"doc":"Iterators which split strings on Grapheme Cluster, Word or…","i":[[3,R[29],R[0],"External iterator for a string's grapheme clusters.",N,N],[3,R[28],E,"External iterator for grapheme clusters and byte offsets.",N,N],[3,R[30],E,"Cursor-based segmenter for grapheme clusters.",N,N],[3,R[32],E,"External iterator for a string's word boundaries.",N,N],[3,R[31],E,"External iterator for word boundaries and byte offsets.",N,N],[3,R[34],E,R[1],N,N],[3,R[35],E,"External iterator for a string's sentence boundaries.",N,N],[3,R[36],E,"External iterator for sentence boundaries and byte offsets.",N,N],[3,R[37],E,R[1],N,N],[4,R[27],E,"An error return indicating that not enough content was…",N,N],[13,"PreContext",E,"More pre-context is needed. The caller should call…",0,N],[13,"PrevChunk",E,"When requesting `prev_boundary`, the cursor is moving past…",0,N],[13,"NextChunk",E,"When requesting `next_boundary`, the cursor is moving past…",0,N],[13,"InvalidOffset",E,"An error returned when the chunk given does not contain…",0,N],[11,R[2],E,R[3],1,[[["self"]],["str"]]],[11,R[2],E,R[3],2,[[["self"]],["str"]]],[11,"new",E,"Create a new cursor. The string and initial offset are…",3,[[["bool"],[R[4]]],[R[21]]]],[11,"set_cursor",E,"Set the cursor to a new location in the same string.",3,[[["self"],[R[4]]]]],[11,"cur_cursor",E,"The current offset of the cursor. Equal to the last value…",3,[[["self"]],[R[4]]]],[11,"provide_context",E,"Provide additional pre-context when it is needed to decide…",3,[[["str"],["self"],[R[4]]]]],[11,"is_boundary",E,"Determine whether the current cursor location is a…",3,[[["str"],["self"],[R[4]]],[[R[6],["bool",R[5]]],["bool"],[R[5]]]]],[11,"next_boundary",E,"Find the next boundary after the current cursor position.…",3,[[["str"],["self"],[R[4]]],[[R[6],[R[7],R[5]]],[R[7],[R[4]]],[R[5]]]]],[11,"prev_boundary",E,"Find the previous boundary after the current cursor…",3,[[["str"],["self"],[R[4]]],[[R[6],[R[7],R[5]]],[R[7],[R[4]]],[R[5]]]]],[11,R[2],E,R[3],4,[[["self"]],["str"]]],[11,R[2],E,R[3],5,[[["self"]],["str"]]],[17,"UNICODE_VERSION",E,"The version of Unicode that this version of…",N,N],[8,R[33],E,"Methods for segmenting strings according to Unicode…",N,N],[10,R[8],E,"Returns an iterator over the [grapheme…",6,[[["self"],["bool"]],[R[8]]]],[10,"grapheme_indices",E,"Returns an iterator over the grapheme clusters of `self`…",6,[[["self"],["bool"]],[R[20]]]],[10,"unicode_words",E,"Returns an iterator over the words of `self`, separated on…",6,[[["self"]],["unicodewords"]]],[10,"split_word_bounds",E,R[9],6,[[["self"]],[R[22]]]],[10,"split_word_bound_indices",E,R[10],6,[[["self"]],[R[23]]]],[10,"unicode_sentences",E,R[9],6,[[["self"]],[R[24]]]],[10,"split_sentence_bounds",E,R[9],6,[[["self"]],[R[25]]]],[10,"split_sentence_bound_indices",E,R[10],6,[[["self"]],[R[26]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[11],E,E,2,[[],["i"]]],[11,R[12],E,E,2,[[[U]],[R[6]]]],[11,R[13],E,E,2,[[],[R[6]]]],[11,"into",E,E,2,[[],[U]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[15],E,E,2,[[["self"]],[R[17]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[11],E,E,1,[[],["i"]]],[11,R[12],E,E,1,[[[U]],[R[6]]]],[11,R[13],E,E,1,[[],[R[6]]]],[11,"into",E,E,1,[[],[U]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[15],E,E,1,[[["self"]],[R[17]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[6]]]],[11,R[13],E,E,3,[[],[R[6]]]],[11,"into",E,E,3,[[],[U]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[15],E,E,3,[[["self"]],[R[17]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[11],E,E,5,[[],["i"]]],[11,R[12],E,E,5,[[[U]],[R[6]]]],[11,R[13],E,E,5,[[],[R[6]]]],[11,"into",E,E,5,[[],[U]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[15],E,E,5,[[["self"]],[R[17]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[11],E,E,4,[[],["i"]]],[11,R[12],E,E,4,[[[U]],[R[6]]]],[11,R[13],E,E,4,[[],[R[6]]]],[11,"into",E,E,4,[[],[U]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[15],E,E,4,[[["self"]],[R[17]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[11],E,E,7,[[],["i"]]],[11,R[12],E,E,7,[[[U]],[R[6]]]],[11,R[13],E,E,7,[[],[R[6]]]],[11,"into",E,E,7,[[],[U]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[15],E,E,7,[[["self"]],[R[17]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[11],E,E,8,[[],["i"]]],[11,R[12],E,E,8,[[[U]],[R[6]]]],[11,R[13],E,E,8,[[],[R[6]]]],[11,"into",E,E,8,[[],[U]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[15],E,E,8,[[["self"]],[R[17]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[11],E,E,9,[[],["i"]]],[11,R[12],E,E,9,[[[U]],[R[6]]]],[11,R[13],E,E,9,[[],[R[6]]]],[11,"into",E,E,9,[[],[U]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[15],E,E,9,[[["self"]],[R[17]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[11],E,E,10,[[],["i"]]],[11,R[12],E,E,10,[[[U]],[R[6]]]],[11,R[13],E,E,10,[[],[R[6]]]],[11,"into",E,E,10,[[],[U]]],[11,R[16],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[15],E,E,10,[[["self"]],[R[17]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[6]]]],[11,R[13],E,E,0,[[],[R[6]]]],[11,"into",E,E,0,[[],[U]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[15],E,E,0,[[["self"]],[R[17]]]],[11,"fmt",E,E,0,[[["self"],[R[40]]],[R[6]]]],[11,"eq",E,E,0,[[[R[5]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[5]],["self"]],["bool"]]],[11,"next",E,E,1,[[["self"]],[R[7]]]],[11,R[18],E,E,1,[[["self"]]]],[11,R[18],E,E,2,[[["self"]]]],[11,"next",E,E,2,[[["self"]],[["str"],[R[7],["str"]]]]],[11,"next",E,E,7,[[["self"]],[["str"],[R[7],["str"]]]]],[11,"next",E,E,4,[[["self"]],[R[7]]]],[11,R[18],E,E,4,[[["self"]]]],[11,R[18],E,E,5,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[["str"],[R[7],["str"]]]]],[11,"next",E,E,10,[[["self"]],[["str"],[R[7],["str"]]]]],[11,R[18],E,E,8,[[["self"]]]],[11,"next",E,E,8,[[["self"]],[["str"],[R[7],["str"]]]]],[11,"next",E,E,9,[[["self"]],[R[7]]]],[11,R[18],E,E,9,[[["self"]]]],[11,R[19],E,E,1,[[["self"]],[R[7]]]],[11,R[19],E,E,2,[[["self"]],[["str"],[R[7],["str"]]]]],[11,R[19],E,E,7,[[["self"]],[["str"],[R[7],["str"]]]]],[11,R[19],E,E,4,[[["self"]],[R[7]]]],[11,R[19],E,E,5,[[["self"]],[["str"],[R[7],["str"]]]]],[11,"clone",E,E,1,[[["self"]],[R[20]]]],[11,"clone",E,E,2,[[["self"]],[R[8]]]],[11,"clone",E,E,3,[[["self"]],[R[21]]]],[11,"clone",E,E,5,[[["self"]],[R[22]]]],[11,"clone",E,E,4,[[["self"]],[R[23]]]],[11,"clone",E,E,10,[[["self"]],[R[24]]]],[11,"clone",E,E,8,[[["self"]],[R[25]]]],[11,"clone",E,E,9,[[["self"]],[R[26]]]]],"p":[[4,R[27]],[3,R[28]],[3,R[29]],[3,R[30]],[3,R[31]],[3,R[32]],[8,R[33]],[3,R[34]],[3,R[35]],[3,R[36]],[3,R[37]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);