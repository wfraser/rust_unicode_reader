var N = null;var searchIndex = {};
searchIndex["unicode_reader"]={"doc":"This crate provides adaptors which wrap byte-oriented readers and yield the UTF-8 data as Unicode code points or grapheme clusters.","items":[[3,"CodePoints","unicode_reader","Wraps a byte-oriented reader and yields the UTF-8 data one code point at a time. Any UTF-8 parsing errors are raised as `io::Error` with `ErrorKind::InvalidData`.",N,N],[3,"BadUtf8Error","","An error raised when parsing a UTF-8 byte stream fails.",N,N],[12,"bytes","","The bytes that could not be parsed as a code point.",0,N],[3,"Graphemes","","Wraps a `char`-oriented reader and yields the data one Unicode grapheme cluster at a time.",N,N],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"next","","Get the next Unicode code point from the stream. Any malformed UTF-8 data will be returned as an `io::Error` with `ErrorKind::InvalidData`, including if the stream reaches EOF before a complete code point is read (which is returned as `ErrorKind::UnexpectedEof`). Any I/O error raised by the underlying stream will be returned as well.",1,[[["self"]],["option"]]],[11,"next","","Get the next grapheme cluster from the stream. Note that because grapheme clusters are of indeterminate length, this has to read the underlying reader until the next cluster starts before it can return a grapheme.",2,[[["self"]],["option"]]],[11,"from","","",1,[[["r"]],["codepoints"]]],[11,"from","","",2,[[["r"]],["graphemes"]]],[11,"from","","",1,[[["r"]],["codepoints",["bytes"]]]],[11,"from","","",2,[[["r"]],["graphemes",["codepoints"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]]],"paths":[[3,"BadUtf8Error"],[3,"CodePoints"],[3,"Graphemes"]]};
searchIndex["unicode_segmentation"]={"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",N,N],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",N,N],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",N,N],[3,"UWordBounds","","External iterator for a string's word boundaries.",N,N],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",N,N],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",N,N],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",N,N],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,N],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,N],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,N],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,[[["self"]],["str"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,[[["self"]],["str"]]],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,[[["usize"],["usize"],["bool"]],["graphemecursor"]]],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,[[["self"],["usize"]]]],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,[[["self"]],["usize"]]],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,[[["self"],["str"],["usize"]]]],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,[[["self"],["str"],["usize"]],["result",["bool","graphemeincomplete"]]]],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,[[["self"],["str"],["usize"]],["result",["option","graphemeincomplete"]]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",4,[[["self"]],["str"]]],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,[[["self"]],["str"]]],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",N,N],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",N,N],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",6,[[["self"],["bool"]],["graphemes"]]],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",6,[[["self"],["bool"]],["graphemeindices"]]],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",6,[[["self"]],["unicodewords"]]],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",6,[[["self"]],["uwordbounds"]]],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",6,[[["self"]],["uwordboundindices"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"ne","","",0,[[["self"],["graphemeincomplete"]],["bool"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option",["str"]]]],[11,"next_back","","",7,[[["self"]],["option",["str"]]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option",["str"]]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"size_hint","","",2,N],[11,"next","","",2,[[["self"]],["option",["str"]]]],[11,"next","","",7,[[["self"]],["option",["str"]]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"size_hint","","",5,N],[11,"next","","",5,[[["self"]],["option",["str"]]]],[11,"clone","","",1,[[["self"]],["graphemeindices"]]],[11,"clone","","",2,[[["self"]],["graphemes"]]],[11,"clone","","",3,[[["self"]],["graphemecursor"]]],[11,"clone","","",5,[[["self"]],["uwordbounds"]]],[11,"clone","","",4,[[["self"]],["uwordboundindices"]]]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UWordBoundIndices"],[3,"UWordBounds"],[8,"UnicodeSegmentation"],[3,"UnicodeWords"]]};
initSearch(searchIndex);
